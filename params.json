{"name":"Sendgrid-nodejs","tagline":"SendGrid Node.js helper library","body":"# Sendgrid-nodejs\r\n\r\nThis nodejs module allows you to quickly and easily send emails through SendGrid using [nodejs](http://nodejs.org/).\r\n\r\nNote: This module was recently upgraded from [0.2.x](https://github.com/sendgrid/sendgrid-nodejs/tree/v0.2.11) to 0.3.x. There were API breaking changes. For documentation on 0.2.x, please [go here](https://github.com/sendgrid/sendgrid-nodejs/tree/v0.2.11).\r\n\r\n[![BuildStatus](https://travis-ci.org/sendgrid/sendgrid-nodejs.png?branch=master)](https://travis-ci.org/sendgrid/sendgrid-nodejs)\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\nsendgrid.send({\r\n  to:       'example@example.com',\r\n  from:     'other@example.com',\r\n  subject:  'Hello World',\r\n  text:     'My first email through SendGrid.'\r\n}, function(err, json) {\r\n  if (err) { return console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\n## Installation\r\n\r\nThe following recommended installation requires [npm](https://npmjs.org/). If you are unfamiliar with npm, see the [npm docs](https://npmjs.org/doc/). Npm comes installed with Node.js since node version 0.8.x therefore you likely already have it.\r\n\r\nAdd the following to your `package.json` file:\r\n\r\n```json\r\n{\r\n  ...\r\n  \"dependencies\": {\r\n    ...\r\n    \"sendgrid\": \"0.3.0\"\r\n  }\r\n}\r\n```\r\n\r\nInstall sendgrid-nodejs and its dependencies:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n### Alternative Installation\r\n\r\nYou can also install sendgrid locally with the following command:\r\n\r\n```bash\r\nnpm install sendgrid\r\n```\r\n\r\n## Usage ##\r\n\r\nTo begin using this library, initialize the SendGrid object with your SendGrid credentials.\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\n```\r\n\r\nCreate a new JavaScript object with your message details.\r\n\r\n```javascript\r\nvar payload   = {\r\n  to      : 'to@example.com',\r\n  from    : 'from@other.com',\r\n  subject : 'Saying Hi',\r\n  text    : 'This is my first email through SendGrid'\r\n}\r\n```\r\n\r\nSend it.\r\n\r\n```javascript\r\nsendgrid.send(payload, function(err, json) {\r\n  if (err) { console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\n**Alternatively you can send it explicitly via Web or SMTP.**\r\n\r\n```javascript\r\nsendgrid.web(payload, function(err, json) {\r\n  if (err) { console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\nOr\r\n\r\n```javascript\r\nsendgrid.smtp(payload, function(err, json) {\r\n  if (err) { console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\n## Power Usage\r\n\r\nThere are two additioanl objects built into this library that will help you use this library as a power user.\r\n\r\n+ Email\r\n+ SmtpapiHeaders\r\n\r\n### Email\r\n\r\nEmail helps you more powerfully prepare your message to be sent.\r\n\r\nNOTE: anything that is available in the Email constructor is available for use in the `sendgrid.send`, `sendgrid.web`, and `sendgrid.smtp` functions.\r\n\r\nTo get started create an Email object:\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\nvar Email     = sendgrid.Email;\r\nvar email     = new Email(params);\r\n```\r\n\r\nYou can pass in as much or as little to `params` as you want, as\r\nthe email object has methods for manipulating all of the data.\r\n\r\n**params structure**\r\n\r\n```javascript\r\nvar params = {\r\n  to: [],\r\n  toname: [],\r\n  from: '',\r\n  fromname: '',\r\n  smtpapi: new SmtpapiHeaders(),\r\n  subject: '',\r\n  text: '',\r\n  html: '',\r\n  bcc: [],\r\n  replyto: '',\r\n  date: new Date(),\r\n  files: [\r\n    {\r\n      filename: '',          // required only if file.content is used.\r\n      contentType: '',       // optional\r\n      cid: '',               // optional, used to specify cid for inline content\r\n      path: '',              //\r\n      url: '',               // == One of these three options is required\r\n      content: ('' | Buffer) //\r\n    }\r\n  ],\r\n  file_data: {},\r\n  headers: {}\r\n};\r\n```\r\n\r\nHere is a sample for using it:\r\n\r\n```javascript\r\nvar email = new Email({\r\n  to: 'walks.it.in@sample.com',\r\n  from: 'arsenal@sample.com',\r\n  subject: 'What was Wenger thinking sending Walcott on that early?',\r\n  text: 'Did you see that ludicrous display last night?'\r\n});\r\n```\r\n\r\n#### Setting data\r\n\r\nHere is an example of all of the functions available on the email object. The comments to the right show the current state of the variables as the functions are called. If you have a specific question, see the [SendGrid API Docs](http://docs.sendgrid.com/documentation/api/). Please open a [GitHub issue](https://github.com/sendgrid/sendgrid-nodejs/issues) if you find bugs or missing features.\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\nvar Email     = sendgrid.Email;\r\nvar email     = new Email({\r\n  to: 'denim@sample.com',\r\n  from: 'roy@sample.com',\r\n  subject: 'Listen',\r\n  text: 'Have you tried turning it off and on again'\r\n});\r\n\r\n/** The following examples update the 'x-smtpapi' headers **/\r\n\r\n/* To Addresses */\r\nemail.addTo('moo@cow.com');       // to = ['moo@cow.com']\r\nemail.addTo(['solid@snake.com',\r\n            'liquid@snake.com']); // to = ['moo@cow.com', 'solid@snake.com', 'liquid@snake.com']\r\n\r\n/* Custom Email Headers */\r\nemail.setHeaders({full: 'hearts'});   // headers = {full: 'hearts'}\r\nemail.addHeaders({spin: 'attack'});   // headers = {full: 'hearts', spin: 'attack'}\r\nemail.setHeaders({mask: 'salesman'}); // headers = {mask: 'salesman'}\r\n\r\n/* Substitution */\r\nemail.addSubVal('keep', 'secret'); // sub = {keep: ['secret']}\r\nemail.addSubVal('keep', 'safe');   // sub = {keep: ['secret', 'safe']}\r\n\r\n/* Section */\r\nemail.setSection({'-charge-': 'This ship is useless.'}); // section = {'-charge-': 'This ship is useless.'}\r\nemail.addSection({'-bomber-': 'Only for sad vikings.'}); // section = {'-charge-': 'This ship is useless.',\r\n                                                         //            '-bomber-': 'Only for sad vikings.'}\r\nemail.setSection({'-beam-': 'The best is for first'});   // section = {'-beam-': 'The best is for first'}\r\n\r\n/* Unique Args */\r\nemail.setUniqueArgs({cow: 'chicken'}); // unique_args = {cow: 'chicken'}\r\nemail.addUniqueArgs({cat: 'dog'});     // unique_args = {cow: 'chicken', cat: 'dog'}\r\nemail.setUniqueArgs({dad: 'proud'});   // unique_args = {dad: 'proud'}\r\n\r\n/* Category */\r\nemail.setCategory('tactics');        // category = ['tactics']\r\nemail.addCategory('advanced');       // category = ['tactics', 'advanced']\r\nemail.setCategory('snowball-fight'); // category = ['snowball-fight']\r\n\r\n/* Filters */\r\n// You can set a filter using an object literal\r\nemail.setFilterSetting({\r\n  'footer': {\r\n    'setting': {\r\n      'enable': 1,\r\n      'text/plain': 'You can haz footers!'\r\n    }\r\n  }\r\n});\r\n\r\n// Alternatively, you can add filter settings one at a time.\r\nemail.addFilterSetting('footer', 'enable', 1);\r\nemail.addFilterSetting('footer', 'text/html', '<strong>boo</strong>');\r\n\r\n/* Attachments */\r\n\r\n/*\r\n * You can add files directly from content in memory.\r\n *\r\n * It will try to guess the contentType based on the filename.\r\n */\r\nemail.addFile({\r\n  filename: 'secret.txt',\r\n  content:  new Buffer('You will never know....')\r\n});\r\n\r\n/*\r\n * You can add files directly from a url.\r\n *\r\n * It will try to guess the contentType based on the filename.\r\n */\r\nemail.addFile({\r\n  filename: 'icon.jpg',\r\n  url: 'http://i.imgur.com/2fDh8.jpg'\r\n});\r\n\r\n/*\r\n * You can add files from a path on the filesystem.\r\n *\r\n * It will try to grap the filename and contentType from the path.\r\n */\r\nemail.addFile({\r\n  path: '../files/resume.txt'\r\n});\r\n\r\n/*\r\n * You can tag files for use as inline HTML content.\r\n *\r\n * It will mark the file for inline disposition using the specified \"cid\".\r\n */\r\nemail.addFile({\r\n  cid: 'the_logo',           // should match cid value in html\r\n  path: '../files/logo.png'\r\n});\r\nemail.addHtml('<div>Our logo:<img src=\"cid:the_logo\"></div>');\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Running Tests\r\n\r\nThe existing tests can be run using [Mocha](http://visionmedia.github.io/mocha/) with the following command:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\nYou can run individual tests with the following command:\r\n\r\n```bash\r\n./node_modules/.bin/mocha [path to test].js\r\n```\r\n\r\n### Integration Tests\r\n\r\nIn order to run the integration tests, you'll need to update the environment file with your valid SendGrid credentials. Start by making a live copy of the example:\r\n\r\n```bash\r\ncp .env.example .env.test\r\n```\r\n\r\nNext, open up `.env.test` and fill it in.  After you have updated the environment file with your credentials, you can run the suite using the following command:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n## License\r\n\r\nLicensed under the MIT License.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}