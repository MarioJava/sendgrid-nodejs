{"name":"Sendgrid-nodejs","tagline":"SendGrid Node.js helper library","body":"# Sendgrid-nodejs\r\n\r\nThis nodejs module allows you to quickly and easily send emails through SendGrid using [nodejs](http://nodejs.org/).\r\n\r\nWARNING2: This module was recently upgraded from [0.3.x](https://github.com/sendgrid/sendgrid-nodejs/tree/v0.3.2) to 0.4.x. There were API breaking changes for how `to` and `addTo` worked. See [the note under addTo](https://github.com/sendgrid/sendgrid-nodejs#addto) for more information.\r\n\r\nWARNING: This module was recently upgraded from [0.2.x](https://github.com/sendgrid/sendgrid-nodejs/tree/v0.2.11) to 0.3.x. There were API breaking changes. \r\nCallback function now acts as a normal Node callback, i.e., (error, result). This means your logic in your callback handler should be REVERSED!\r\nFor documentation on 0.2.x, please [go here](https://github.com/sendgrid/sendgrid-nodejs/tree/v0.2.11).\r\n\r\n[![BuildStatus](https://travis-ci.org/sendgrid/sendgrid-nodejs.png?branch=master)](https://travis-ci.org/sendgrid/sendgrid-nodejs)\r\n[![NPM version](https://badge.fury.io/js/sendgrid.png)](http://badge.fury.io/js/sendgrid)\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\nsendgrid.send({\r\n  to:       'example@example.com',\r\n  from:     'other@example.com',\r\n  subject:  'Hello World',\r\n  text:     'My first email through SendGrid.'\r\n}, function(err, json) {\r\n  if (err) { return console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\n## Installation\r\n\r\nThe following recommended installation requires [npm](https://npmjs.org/). If you are unfamiliar with npm, see the [npm docs](https://npmjs.org/doc/). Npm comes installed with Node.js since node version 0.8.x therefore you likely already have it.\r\n\r\nAdd the following to your `package.json` file:\r\n\r\n```json\r\n{\r\n  ...\r\n  \"dependencies\": {\r\n    ...\r\n    \"sendgrid\": \"0.4.0\"\r\n  }\r\n}\r\n```\r\n\r\nInstall sendgrid-nodejs and its dependencies:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n### Alternative Installation\r\n\r\nYou can also install sendgrid locally with the following command:\r\n\r\n```bash\r\nnpm install sendgrid\r\n```\r\n\r\n## SendGrid APIs\r\n\r\nSendGrid provides two methods of sending email: the Web API, and SMTP API.  SendGrid recommends using the SMTP API for sending emails.\r\nFor an explanation of the benefits of each, refer to http://docs.sendgrid.com/documentation/get-started/integrate/examples/smtp-vs-rest/.\r\n\r\nThis library implements a common interface to make it very easy to use either API.\r\n\r\nPlease open a [GitHub issue](https://github.com/sendgrid/sendgrid-nodejs/issues) if you find bugs or missing features.\r\n\r\n## Usage\r\n\r\nTo begin using this library, initialize the SendGrid object with your SendGrid credentials.\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\n```\r\n\r\nCreate a new JavaScript object with your message details.\r\n\r\n```javascript\r\nvar payload   = {\r\n  to      : 'to@example.com',\r\n  from    : 'from@other.com',\r\n  subject : 'Saying Hi',\r\n  text    : 'This is my first email through SendGrid'\r\n}\r\n```\r\n\r\nSend it.\r\n\r\n```javascript\r\nsendgrid.send(payload, function(err, json) {\r\n  if (err) { console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\n**Alternatively you can opt to send via SMTP rather than via the WEB API. Just initialize with the `api: 'smtp'` option.**\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key, {api: 'smtp'});\r\n```\r\n\r\n## Advanced Usage\r\n\r\nThere are two additioanl objects built into this library that will help you use this library as a power user.\r\n\r\n+ Email\r\n+ SmtpapiHeaders\r\n\r\n### Email\r\n\r\nEmail helps you more powerfully prepare your message to be sent.\r\n\r\n\r\nTo get started create an Email object where `params` is a javascript object. You can pass in as much or as little to `params` as you want.\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\nvar Email     = sendgrid.Email;\r\nvar email     = new Email(params);\r\n```\r\n\r\n#### Sample\r\n\r\nHere is a sample for using it.\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\nvar Email     = sendgrid.Email;\r\nvar email     = new Email({\r\n  to:       'person@somewhere.com',\r\n  from:     'you@yourself',\r\n  subject:  'What was Wenger thinking sending Walcott on that early?',\r\n  text:     'Did you see that ludicrous display last night?'\r\n});\r\nsendgrid.send(email, function(err, json) {\r\n  if (err) { return console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\n#### Available params\r\n\r\n```javascript\r\nvar params = {\r\n  smtpapi:  new SmtpapiHeaders(),\r\n  to:       [],\r\n  toname:   [],\r\n  from:     '',\r\n  fromname: '',\r\n  subject:  '',\r\n  text:     '',\r\n  html:     '',\r\n  bcc:      [],\r\n  replyto:  '',\r\n  date:     new Date(),\r\n  files: [\r\n    {\r\n      filename:     '',           // required only if file.content is used.\r\n      contentType:  '',           // optional\r\n      cid:          '',           // optional, used to specify cid for inline content\r\n      path:         '',           //\r\n      url:          '',           // == One of these three options is required\r\n      content:      ('' | Buffer) //\r\n    }\r\n  ],\r\n  file_data:  {},\r\n  headers:    {}\r\n};\r\n```\r\n\r\nNOTE: anything that is available in the Email constructor is available for use in the `sendgrid.send` function.\r\n\r\n#### Setting params\r\n\r\nYou can set params like you would for any standard JavaScript object.\r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')(api_user, api_key);\r\nvar Email     = sendgrid.Email;\r\nvar email     = new Email({to: 'person@email.com'});\r\nemail.to      = \"different@email.com\";\r\nemail.replyto = \"reply-here@email.com\";\r\nemail.subject = \"This is a subject\";\r\n```\r\n\r\n#### addTo\r\n\r\nYou can add one or multiple TO addresses using `addTo`.\r\n\r\n```javascript\r\nvar email     = new Email(); \r\nemail.addTo('foo@bar.com');\r\nemail.addTo('another@another.com');\r\nsendgrid.send(email, function(err, json) { });\r\n```\r\n\r\nNOTE: This is different than setting an array on `to`. The array on `to` will show everyone the to addresses it was sent to. Using addTo will not. Usually, you'll want to use `addTo`.  \r\n\r\n#### setHeaders\r\n\r\nYou can set custom headers. \r\n\r\n```javascript\r\nvar email     = new Email(); \r\nemail.setHeaders({full: 'hearts'});   // headers = {full: 'hearts'}\r\nemail.setHeaders({mask: 'salesman'}); // headers = {mask: 'salesman'}\r\nsendgrid.send(email, function(err, json) { });\r\n```\r\n\r\n#### addHeaders\r\n\r\nYou can add custom headers. This will ADD rather than SET headers.\r\n\r\n```javascript\r\nvar email     = new Email(); \r\nemail.setHeaders({full: 'hearts'});   // headers = {full: 'hearts'}\r\nemail.addHeaders({spin: 'attack'});   // headers = {full: 'hearts', spin: 'attack'}\r\nemail.addHeaders({mask: 'salesman'}); // headers = {full: 'hearts', spin: 'attack', mask: 'salesman'}\r\nsendgrid.send(email, function(err, json) { });\r\n```\r\n\r\n#### addSubVal\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.addSubVal('keep', 'secret'); // sub = {keep: ['secret']}\r\nemail.addSubVal('keep', 'safe');   // sub = {keep: ['secret', 'safe']}\r\n```\r\n\r\n#### setSection \r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.setSection({'-charge-': 'This ship is useless.'}); // section = {'-charge-': 'This ship is useless.'}\r\n```\r\n\r\n#### addSection\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.setSection({'-charge-': 'This ship is useless.'}); // section = {'-charge-': 'This ship is useless.'}\r\nemail.addSection({'-bomber-': 'Only for sad vikings.'}); // section = {'-charge-': 'This ship is useless.',\r\n```\r\n\r\n#### setUniqueArgs\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.setUniqueArgs({cow: 'chicken'}); // unique_args = {cow: 'chicken'}\r\nemail.setUniqueArgs({dad: 'proud'});   // unique_args = {dad: 'proud'}\r\n```\r\n\r\n#### addUniqueArgs\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.setUniqueArgs({cow: 'chicken'}); // unique_args = {cow: 'chicken'}\r\nemail.addUniqueArgs({cat: 'dog'});     // unique_args = {cow: 'chicken', cat: 'dog'}\r\n```\r\n\r\n#### setFilterSetting\r\n\r\nYou can set a filter using an object literal.\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.setFilterSetting({\r\n  'footer': {\r\n    'setting': {\r\n      'enable': 1,\r\n      'text/plain': 'You can haz footers!'\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### setCategory\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.setCategory('tactics');        // category = ['tactics']\r\nemail.setCategory('snowball-fight'); // category = ['snowball-fight']\r\n```\r\n\r\n#### addCategory\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.setCategory('tactics');        // category = ['tactics']\r\nemail.addCategory('advanced');       // category = ['tactics', 'advanced']\r\n```\r\n\r\n#### addFilterSetting\r\n\r\nAlternatively, you can add filter settings one at a time.\r\n\r\n```javascript\r\nvar email     = new Email();\r\nemail.addFilterSetting('footer', 'enable', 1);\r\nemail.addFilterSetting('footer', 'text/html', '<strong>boo</strong>');\r\n```\r\n\r\n#### addFile\r\n\r\nYou can add files directly from content in memory. It will try to guess the contentType based on the filename.\r\n\r\n```javascript\r\nemail.addFile({\r\n  filename: 'secret.txt',\r\n  content:  new Buffer('You will never know....')\r\n});\r\n```\r\n\r\nYou can add files directly from a url. It will try to guess the contentType based on the filename.\r\n\r\n```javascript\r\nemail.addFile({\r\n  filename: 'icon.jpg',\r\n  url: 'http://i.imgur.com/2fDh8.jpg'\r\n});\r\n```\r\n\r\nYou can add files from a path on the filesystem. It will try to grap the filename and contentType from the path.\r\n\r\n```javascript\r\nemail.addFile({\r\n  path: '../files/resume.txt'\r\n});\r\n```\r\n\r\nYou can tag files for use as inline HTML content. It will mark the file for inline disposition using the specified \"cid\".\r\n\r\n```javascript\r\nemail.addFile({\r\n  cid: 'the_logo',           // should match cid value in html\r\n  path: '../files/logo.png'\r\n});\r\nemail.addHtml('<div>Our logo:<img src=\"cid:the_logo\"></div>');\r\n```\r\n\r\n## Web Options\r\n\r\nsendgrid-nodejs uses the node request module. You can pass in options\r\nto be merged. This enables you to use your own https.Agent, node-tunnel\r\nor the request proxy url. Please note that sendgrid requires https.\r\n\r\n```javascript\r\nvar sendgrid = require('sendgrid')('username', 'password', { web: {\r\nproxy: \"http://localproxy:3128\" } });\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nvar https = require('https');\r\nvar agent = new https.Agent();\r\n// Set Max Sockets to 500\r\nagent.maxSockets = 500;\r\n\r\nvar sendgrid = require('sendgrid')('username', 'password', { web: {\r\npool: agent } });\r\n```\r\n\r\n## SMTP options\r\n\r\nYou can change the port to 465 if you prefer. When initializing with the smtp api, also initialize with the port. \r\n\r\n```javascript\r\nvar sendgrid  = require('sendgrid')('username', 'password', {api: 'smtp', port: 465});\r\nvar payload   = {...};\r\nsendgrid.send(payload, function(err, json) {\r\n  if (err) { console.error(err); }\r\n  console.log(json);\r\n});\r\n```\r\n\r\nYou can also pass some additional fields through the smtp to the underlying nodemailer. The list of these fields are [here](https://github.com/andris9/Nodemailer#e-mail-message-fields). To do this, you have to use the underlying `.smtp` method. This is really for power users.\r\n\r\n```javascript\r\nvar sendgrid            = require('sendgrid')('username', 'password', {api: 'smtp'});\r\nvar payload             = {...};\r\nvar nodeMailerOptions   = {\r\n  messageId: \"some-message-id\" \r\n}\r\nsendgrid.smtp(payload, nodeMailerOptions, function(err, json) {\r\n  if (err) { console.error(err); }\r\n  console.log(json);\r\n}\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Running Tests\r\n\r\nThe existing tests can be run using [Mocha](http://visionmedia.github.io/mocha/) with the following command:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\nYou can run individual tests with the following command:\r\n\r\n```bash\r\n./node_modules/.bin/mocha [path to test].js\r\n```\r\n\r\n### Integration Tests\r\n\r\nIn order to run the integration tests, you'll need to update the environment file with your valid SendGrid credentials. Start by making a live copy of the example:\r\n\r\n```bash\r\ncp .env.example .env.test\r\n```\r\n\r\nNext, open up `.env.test` and fill it in.  After you have updated the environment file with your credentials, you can run the suite using the following command:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n## License\r\n\r\nLicensed under the MIT License.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}